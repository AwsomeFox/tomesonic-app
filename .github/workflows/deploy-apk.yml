name: Publish Test App

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'ios/**'
      - 'readme.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout sources
        uses: actions/checkout@v3

      - name: use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 21

      - name: install dependencies
        run: npm ci

      - name: build Nuxt project
        run: npm run generate

      - name: copy to Android project
        run: npx cap sync

      - name: build Android app
        run: ./android/gradlew assembleDebug -p android --no-daemon

      - name: rename apk
        working-directory: android/app/build/outputs/apk/debug/
        run: |
          build="$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)"
          name="audiobookshelf-${build}.apk"
          mv -v app-debug.apk "${name}"

      - name: prepare GitHub Pages resources
        run: |
          # Create the main deployment directory
          mkdir -p ghpages

          # Create subdirectories for organized structure
          mkdir -p ghpages/test
          mkdir -p ghpages/docs

          # Set up the test page directory
          cp android/app/build/outputs/apk/debug/*apk ghpages/test/
          cp static/Logo.png ghpages/test/logo.png
          cp .github/testing-page-template.html ghpages/test/index.html

          # Copy documentation to the docs directory
          if [ -d "docs" ] && [ "$(ls -A docs)" ]; then
            echo "Copying documentation from docs directory..."
            cp -r docs/* ghpages/docs/
          else
            echo "No documentation found in docs directory."
          fi

          # Create index files for the docs directory if they don't exist
          if [ ! -f "ghpages/docs/index.html" ]; then
            echo "Creating docs index.html..."
            cp .github/docs-index-template.html ghpages/docs/index.html || cp ${ROOT_DIR}/.github/docs-index-template.html ghpages/docs/index.html
          fi

          # List the contents of the deployment directory
          echo "Contents of ghpages directory:"
          ls -la ghpages/
          echo "Contents of test directory:"
          ls -la ghpages/test/
          echo "Contents of docs directory:"
          ls -la ghpages/docs/

      - name: debug directories
        run: |
          echo "Current directory: $(pwd)"
          echo "Template files in .github directory:"
          ls -la .github/
          echo "Contents of workspace root:"
          ls -la

      - name: build pages
        run: |
          # Save the absolute path to the root directory
          ROOT_DIR=$(pwd)
          # Update the test page
          cd ghpages/test
          sed -i "s/__DATE__/$(date)/g" index.html
          sed -i "s/__COMMIT__/$(git rev-parse --short HEAD)/g" index.html
          sed -i "s/__APK__/$(ls *apk)/g" index.html

          # Create test directory README
          cp ${ROOT_DIR}/.github/TEST-README-template.md README.md
          # Add dynamic content to test README
          sed -i "s|<!-- DYNAMIC_CONTENT -->|Last updated: $(date)\\nCommit: $(git rev-parse --short HEAD)|g" README.md
          cd ..

          # Create root README (from the ghpages directory)
          cp ${ROOT_DIR}/.github/ROOT-README-template.md README.md
          # Add dynamic content to root README
          sed -i "s|<!-- DYNAMIC_CONTENT -->|\\n\\n---\\n\\nLast updated: $(date)\\nCommit: $(git rev-parse --short HEAD)|g" README.md

          # Create root index.html that redirects to the GitHub repository
          cp ${ROOT_DIR}/.github/root-index-template.html index.html

      - name: upload test page artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./ghpages

  deploy:
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
